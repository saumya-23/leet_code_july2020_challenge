class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        int n = nums.length;
        int k=0;
        for(int i=0;i<n-1;i++)
        {
            HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
            int a = nums[i];
            System.out.println("a :"+a);
            for(int j=i+1;j<nums.length;j++)
            {
                int b = nums[j];
                int diff = -(a+b);
                System.out.println("b :"+b);
                System.out.println("diff :"+diff);
                if(map.containsKey(diff))
                {
                    List<Integer> al = new ArrayList<Integer>();
                    al.add(a);
                    al.add(b);
                    al.add(diff);
                    result.add(al);
                    k++;
                }
                else
                {
                    map.put(nums[j],nums[j]);
                }
            }
        }
        return result;
    }
}


public void getMaxWidthRecur(TreeNode root, int[] count, int level)  
    {
        if(root.left != null && root.right != null){
        count[level]++;
        getMaxWidthRecur(root.left,count,level+1);
        getMaxWidthRecur(root.right,count,level+1);
        }
        else if(root.left == null && root.right != null){
            count[level]++;
            getMaxWidthRecur(root.right,count,level+1);
        }
        if(root.left != null && root.right == null){
            count[level]++;
            getMaxWidthRecur(root.left,count,level+1);
        }
            
    }



    /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        
        if(root == null)
            return 0;
        
        int h = height(root);
       // System.out.println("height :"+h);
        int[] count = new int[10];
        int level = 0;
        
        getMaxWidthRecur(root,count,level);
        
        return getMax(count,h);
    }
    
   public void getMaxWidthRecur(TreeNode root, int[] count, int level)  
    {
        if(root.left != null && root.right != null){
        count[level]++;
        getMaxWidthRecur(root.left,count,level+1);
        getMaxWidthRecur(root.right,count,level+1);
        }
        else if(root.left == null && root.right != null){
            count[level+1]++;
            getMaxWidthRecur(root.right,count,level+1);
        }
        else if(root.left != null && root.right == null){
            count[level+1]++;
            getMaxWidthRecur(root.left,count,level+1);
        }
       else if(root.left == null && root.right == null)
       {
           count[level]++;
       }
    }
    
    int height(TreeNode node)  
    {
        if (node == null)  
            return 0; 
        else 
        {
            /* compute the height of each subtree */
            int lHeight = height(node.left); 
            int rHeight = height(node.right); 
               
            /* use the larger one */
            return (lHeight > rHeight) ? (lHeight + 1) : (rHeight + 1); 
        } 
    }
    
    public int getMax(int[] count,int h)
    {
        int max = count[0];
       
        for(int i=1;i<count.length;i++)
        {
            if(count[i]>max)
                max=count[i];
        }
        return max;
    }
}